{"version":3,"sources":["components/MVPQueue/index.js","components/DetailedView/index.js","components/Home/index.js","utils/useDebounce.js","App.js","serviceWorker.js","index.js"],"names":["divStyle","width","height","background","borderRadius","boxShadow","textAlign","padding","boxSizing","monsterImg","margin","monsterName","fontSize","lineHeight","monsterDetails","zeroPad","num","places","String","padStart","MVPQueue","onClick","data","className","style","id","src","monsterId","alt","name","diff","Date","nextSpawn","Chip","size","label","clickable","color","minutes","Math","floor","variant","statusComponent","getHours","getMinutes","getSpawnTime","minHeight","gridColumn","gridRow","spotlightStyle","marginLeft","marginRight","display","gridTemplateColumns","float","objectFit","maxWidth","minWidth","verticalAlign","justifyContent","alignItems","form","button","marginBottom","descendingDate","a","b","DetailedView","onChange","spotlight","updateTime","data_","index","findIndex","obj","minSpawnTime","now","lastSeen","getTime","sort","saveChanges","event","fetch","method","headers","body","JSON","stringify","then","res","console","log","selectedData","find","x","TextField","value","target","type","datetime","date","parseTime","InputLabelProps","shrink","inputProps","step","hours","substr","setHours","parseInt","setMinutes","toISOString","author","fullWidth","tomb","multiline","rows","notes","Button","mvpDataPlaceholder","Home","useState","mvpData","setMvpData","setSpotlight","history","useHistory","accessCode","useParams","debouncedCode","timeout","state","setState","useEffect","handler","setTimeout","clearTimeout","useDebouce","json","fetchData","push","map","key","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2f457998.chunk.js","sourcesContent":["import React from 'react'\r\nimport Chip from '@material-ui/core/Chip';\r\n\r\nconst divStyle = {\r\n    width: \"300px\",\r\n    height: \"300px\",\r\n    background: \"#ffffff\",\r\n    borderRadius: \"25px\",\r\n    boxShadow: \"0px 4px 2px rgba(173, 182, 216, 0.25)\",\r\n    textAlign: \"center\",\r\n    padding: \"1rem\",\r\n    boxSizing: \"border-box\"\r\n}\r\n\r\nconst monsterImg = {\r\n    textAlign: \"center\",\r\n    margin: \"0 auto\",\r\n    height: \"150px\",\r\n}\r\n\r\nconst monsterName = {\r\n    fontSize: \"24px\",\r\n    lineHeight: \"28px\",\r\n}\r\n\r\nconst monsterDetails = {\r\n    fontSize: \"14px\",\r\n    lineHeight: \"16px\",\r\n}\r\n\r\nconst zeroPad = (num, places) => String(num).padStart(places, '0')\r\n\r\nfunction MVPQueue({onClick, data}) {\r\n    const statusComponent = () => {\r\n        var diff = new Date(data.nextSpawn) - new Date();\r\n        if (diff < 0) {\r\n            return (\r\n                <Chip\r\n                    size=\"small\"\r\n                    label=\"Status: Alive\"\r\n                    clickable\r\n                    color=\"primary\"\r\n                />)\r\n        }\r\n        var minutes = Math.floor((diff/1000)/60);\r\n        return (\r\n            <Chip\r\n                variant=\"outline\"\r\n                size=\"small\"\r\n                label={\"Respawn in : \" + minutes + \" minutes\"}\r\n                clickable\r\n                color=\"secondary\"\r\n            />)\r\n    }\r\n\r\n    const getSpawnTime = () => {\r\n        const nextSpawn = new Date(data.nextSpawn)\r\n        return zeroPad(nextSpawn.getHours(),2) + \":\" + zeroPad(nextSpawn.getMinutes(),2)\r\n    }\r\n    return (\r\n        <div className=\"card\" style={divStyle} onClick={() => onClick(data.id)}>\r\n            <img style={monsterImg} src={\"http://db.irowiki.org/image/monster/\" + data.monsterId +\".png\"} alt=\"Monster\"/>\r\n            <p style={monsterName}>{data.name}</p>\r\n            <br />\r\n            {statusComponent()}\r\n            <br />\r\n            <br />\r\n            <p style={monsterDetails}>{\"Respawn Time : \" + getSpawnTime()}</p>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MVPQueue\r\n","import React from 'react'\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst divStyle = {\r\n    width: \"630px\",\r\n    minHeight: \"630px\",\r\n    background: \"#ffffff\",\r\n    borderRadius: \"25px\",\r\n    boxShadow: \"0px 4px 2px rgba(173, 182, 216, 0.25)\",\r\n    textAlign: \"center\",\r\n    padding: \"1rem\",\r\n    boxSizing: \"border-box\",\r\n    gridColumn: \"1 / span 2\",\r\n    gridRow: \"2 / span 2\",\r\n}\r\nconst spotlightStyle = {\r\n    width: \"440px\",\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n    display: \"grid\",\r\n    gridTemplateColumns: \"auto auto\",\r\n}\r\nconst monsterImg = {\r\n    float: \"left\",\r\n    objectFit: \"cover\",\r\n    maxWidth: \"250px\",\r\n    minWidth: \"200px\",\r\n    height: \"250px\",\r\n    textAlign: \"left\",\r\n    display: \"block\",\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n    lineHeight: \"250px\"\r\n}\r\n\r\nconst verticalAlign = {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n}\r\n\r\nconst form = {\r\n    width: \"440px\",\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n}\r\n\r\nconst button = {\r\n    width: \"100%\",\r\n    display: \"block\",\r\n    gridColumn: \"1 / span 2\",\r\n    height: \"48px\",\r\n    marginBottom: \"17px\"\r\n}\r\nfunction descendingDate(a,b) {\r\n    if (a.nextSpawn < b.nextSpawn)\r\n      return -1\r\n    else if (a.nextSpawn > b.nextSpawn)\r\n      return 1\r\n    else\r\n      return 0\r\n  }\r\n\r\nfunction DetailedView({onChange, data, spotlight}) {\r\n\r\n    const handleChange = (event) => {\r\n        var data_ = [...data]\r\n        var index = data.findIndex(obj => obj.id === spotlight);\r\n        data_[index].tomb = event.target.value;\r\n        onChange(data_);\r\n    }\r\n\r\n    const handleNotes = (event) => {\r\n        var data_ = [...data]\r\n        var index = data.findIndex(obj => obj.id === spotlight);\r\n        data_[index].notes = event.target.value;\r\n        onChange(data_);\r\n    }\r\n\r\n    const handleName = (event) => {\r\n        var data_ = [...data]\r\n        var index = data.findIndex(obj => obj.id === spotlight);\r\n        data_[index].name = event.target.value;\r\n        onChange(data_);\r\n    }\r\n\r\n    const handleNextSpawn = (event) => {\r\n        var data_ = [...data]\r\n        var index = data.findIndex(obj => obj.id === spotlight);\r\n        \r\n        const hours = event.target.value.substr(0,2)\r\n        const minutes = event.target.value.substr(3,4)\r\n\r\n        var nextSpawn = new Date(data_[index].nextSpawn)\r\n        nextSpawn.setHours(parseInt(hours))\r\n        nextSpawn.setMinutes(parseInt(minutes))\r\n        data_[index].nextSpawn = nextSpawn.toISOString()\r\n        onChange(data_.sort(descendingDate));\r\n    }\r\n\r\n    const handleAuthor = (event) => {\r\n        var data_ = [...data]\r\n        var index = data.findIndex(obj => obj.id === spotlight);\r\n        data_[index].author = event.target.value;\r\n        onChange(data_);\r\n    }\r\n    \r\n    const zeroPad = (num, places) => String(num).padStart(places, '0')\r\n    const parseTime = (datetime) => {\r\n        const date = new Date(datetime)\r\n        return zeroPad(date.getHours(), 2) + \":\" + zeroPad(date.getMinutes(), 2)\r\n    }\r\n\r\n    const updateTime = async () => {\r\n        var data_ = [...data]\r\n        var index = data.findIndex(obj => obj.id === spotlight);\r\n\r\n        const minSpawnTime = data_[index].minSpawnTime\r\n        const now = new Date()\r\n        \r\n        data_[index].lastSeen = now\r\n        data_[index].nextSpawn = new Date(now.getTime() + minSpawnTime*60000);\r\n        onChange(data_.sort(descendingDate));\r\n        saveChanges()\r\n    }\r\n\r\n    const saveChanges = (event) => {\r\n        const res = fetch('https://ro-mvp-timer.now.sh/api/saveChanges', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(data)\r\n        })\r\n        res\r\n        .then((res) => console.log(res));\r\n    }\r\n    const selectedData = data.find(x => x.id === spotlight);\r\n    return (\r\n        <div style={divStyle}>\r\n            <div style={spotlightStyle}>\r\n                <img style={monsterImg} src={\"http://db.irowiki.org/image/monster/\" + selectedData.monsterId +\".png\"} alt=\"Monster\"/>\r\n                <div style={verticalAlign}>\r\n                    <div>\r\n \r\n                    <TextField style={{marginBottom: \"17px\", width: \"100%\"}} label=\"Boss Name\" value={selectedData.name} onChange={handleName}/>\r\n\r\n                    <TextField\r\n                        id=\"time\"\r\n                        label=\"Next Spawn\"\r\n                        type=\"time\"\r\n                        style={{marginBottom: \"17px\", width: \"100%\"}}\r\n                        value={parseTime(selectedData.nextSpawn)}\r\n                        InputLabelProps={{\r\n                        shrink: true,\r\n                        }}\r\n                        inputProps={{\r\n                        step: 60, // 1 min\r\n                        }}\r\n                        onChange={handleNextSpawn}\r\n                    />\r\n\r\n                    <TextField style={{marginBottom: \"17px\", width: \"100%\"}} label=\"Author\" value={selectedData.author} onChange={handleAuthor} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <br />\r\n            <div style={form}>\r\n                <div style={{marginBottom: \"17px\"}}><TextField id=\"standard-basic\" fullWidth label=\"Tomb Location\" value={selectedData.tomb} onChange={handleChange}/></div>\r\n                <div style={{marginBottom: \"17px\"}}><TextField id=\"standard-basic\" fullWidth multiline rows={4} label=\"Notes\" value={selectedData.notes} onChange={handleNotes}/></div>\r\n                <Button style={button} variant=\"contained\" color=\"primary\" onClick={updateTime}>MVP P*WNED</Button>\r\n                <Button style={button} variant=\"outlined\" color=\"primary\" onClick={saveChanges}>Save Changes</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DetailedView\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport './Home.css';\r\n\r\nimport MVPQueue from '../MVPQueue';\r\nimport DetailedView from '../DetailedView';\r\nimport useDebouce from '../../utils/useDebounce';\r\n\r\n\r\nconst mvpDataPlaceholder = {\r\n  'id': '0',\r\n  'accessCode': '',\r\n  'monsterId': '1002',\r\n  'name': 'Poring',\r\n  'lastSeen': '2020-05-12T00:00:00.168Z',\r\n  'nextSpawn': '2020-05-12T00:00:00.168Z',\r\n  'tomb': '',\r\n  'isExactTime': 'True',\r\n  'notes': '',\r\n  'author': 'Loading',\r\n}\r\n\r\nfunction descendingDate(a,b) {\r\n  if (a.nextSpawn < b.nextSpawn)\r\n    return -1\r\n  else if (a.nextSpawn > b.nextSpawn)\r\n    return 1\r\n  else\r\n    return 0\r\n}\r\n\r\nfunction Home() {\r\n  const [mvpData, setMvpData] = useState([mvpDataPlaceholder])\r\n  const [spotlight, setSpotlight] = useState('0')\r\n  \r\n  let history = useHistory();\r\n  let { accessCode } = useParams();\r\n  let debouncedCode = useDebouce(accessCode, 1000)\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const res = await fetch(\"https://ro-mvp-timer.now.sh/api/fetchData?accessCode=\"+debouncedCode);\r\n      res.json()\r\n      .then(res => {\r\n        setMvpData(res.sort(descendingDate));\r\n        setSpotlight(res[0][\"id\"]);\r\n      })\r\n    }\r\n    \r\n    fetchData();\r\n  }, [debouncedCode]);\r\n\r\n  const handleChangeAccessCode = (event) => {\r\n        accessCode = event.target.value\r\n        history.push('/'+accessCode);\r\n  }\r\n  return (\r\n    <div className=\"main\">\r\n        <div className=\"container\">\r\n        <div style={{gridColumn: \"1 / span 2\"}}></div>\r\n        <div>\r\n            <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{width: \"100%\", height: \"48px\"}}\r\n            >\r\n            + ADD MVP TO LIST\r\n            </Button>\r\n        </div>\r\n        <div>\r\n        <TextField id=\"standard-basic\" style={{width: \"100%\"}} label=\"Access Code\" value={accessCode} onChange={handleChangeAccessCode} />\r\n        </div>\r\n        <DetailedView onChange={setMvpData} data={mvpData} spotlight={spotlight}/>\r\n        {mvpData.map(data => <MVPQueue onClick={setSpotlight} data={data} key={data.id}/>)}\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import { useState, useEffect } from 'react';\r\n\r\nexport default (value, timeout) => {\r\n    const [state, setState] = useState(value);\r\n\r\n    useEffect(() => {\r\n        const handler = setTimeout(() => setState(value), timeout);\r\n\r\n        return () => clearTimeout(handler);\r\n    }, [value, timeout]);\r\n\r\n    return state;\r\n}","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Home from './components/Home';\n\n\nfunction App() {\n  return (\n    <main>\n    <Switch>\n      <Route path='/:accessCode?' component={Home} />\n    </Switch>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter  } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter >\n      <App />\n    </HashRouter >\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}